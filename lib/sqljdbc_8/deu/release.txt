Informationen zu dieser Version
Microsoft JDBC-Treiber 8.4 für SQL Server
August 2020

------------
EINFÜHRUNG
------------
Diese Datei enthält aktuelle oder andere wichtige Informationen, die die Dokumentation zum Microsoft JDBC-Treiber 8.4 
für SQL Server ergänzen. Lesen Sie sich diese Datei vollständig 
vor der Installation des JDBC-Treibers durch.

Ihr Feedback ist sehr wichtig für uns. Microsoft ist bestrebt, Ihr Feedback schnellstmöglich 
zu beantworten. Informationen zum Senden von Feedback über den JDBC-Treiberblog und Onlineforen 
finden Sie auf der Seite zum Microsoft JDBC-Treiber 8.4 für SQL Server unter https://aka.ms/mssql-jdbc-feedback.


------------
INSTALLATION
------------
Anweisungen zum Installieren des JDBC-Treibers finden Sie in der Datei "install.txt". In dieser Datei finden Sie 
Informationen zum Installieren des JDBC-Treibers auf Windows-, Linux- und macOS-Betriebssystemen.


---------------------------
UNTERSTÜTZTE BETRIEBSSYSTEME
---------------------------
Unterstützte Betriebssysteme für den Microsoft JDBC-Treiber 8.4 für SQL Server:
  Windows Server 2012
  Windows Server 2012 R2
  Windows Server 2016
  Windows Server 2019
  Windows 8.1
  Windows 10
  Linux
  macOS

Die Liste oben enthält Beispiele von unterstützten Betriebssystemen. Der JDBC-Treiber ist 
für alle Betriebssysteme ausgelegt, die die Verwendung einer JVM (Java Virtual Machine) unterstützen. 

Allerdings wurden nur die neuesten Betriebssysteme von Linux und macOS (Ubuntu 20.04, Ubuntu 18.04, CentOS 7, SUSE 12,
 macOS 10.15) auf Kompatibilität und Unterstützung getestet.


-----------------------
UNTERSTÜTZTE JAVA-VERSIONEN
-----------------------
Der Microsoft JDBC-Treiber 8.4 für SQL Server wurde getestet und unterstützt die aktuellen Versionen des Java 
Development Kit-Builds (JDK) über Open JDK und Zulu in den oben aufgeführten unterstützten Betriebssystemen.
Die im Folgenden aufgelisteten Familienversionen der JRE-Systembibliothek (Java Runtime Environment) werden unterstützt:

  ----------------------------------------------------------------------
  JRE-Familienversion | JAR-Dateien des Treibers für die höchste Unterstützung
  ----------------------------------------------------------------------
  8+                 | mssql-jdbc-8.4.1.jre8.jar
  11+                | mssql-jdbc-8.4.1.jre11.jar
  14+                | mssql-jdbc-8.4.1.jre14.jar


----------------
INHALT DIESER VERSION
----------------
Die ZIP- oder TAR-Datei des Microsoft JDBC-Treibers 8.4 für SQL Server entpackt die folgenden Dateien 
an den angegebenen Speicherorten und relativ zum ausgewählten Installationsverzeichnis:

<Installationsverzeichnis>\sqljdbc_<Version>\<Sprache>\install.txt
<Installationsverzeichnis>\sqljdbc_<Version>\<Sprache>\release.txt
<Installationsverzeichnis>\sqljdbc_<Version>\<Sprache>\license.txt
<Installationsverzeichnis>\sqljdbc_<Version>\<Sprache>\thirdpartynotices.txt
<Installationsverzeichnis>\sqljdbc_<Version>\<Sprache>\mssql-jdbc-8.4.1.jre8.jar
<Installationsverzeichnis>\sqljdbc_<Version>\<Sprache>\mssql-jdbc-8.4.1.jre11.jar
<Installationsverzeichnis>\sqljdbc_<Version>\<Sprache>\mssql-jdbc-8.4.1.jre14.jar
<Installationsverzeichnis>\sqljdbc_<Version>\<Sprache>\auth\x86\mssql-jdbc_auth-8.4.1.x86.dll
<Installationsverzeichnis>\sqljdbc_<Version>\<Sprache>\auth\x64\mssql-jdbc_auth-8.4.1.x64.dll
<Installationsverzeichnis>\sqljdbc_<Version>\<Sprache>\samples\<Beispieldateien...>
<Installationsverzeichnis>\sqljdbc_<Version>\<Sprache>\xa\xa_install.sql
<Installationsverzeichnis>\sqljdbc_<Version>\<Sprache>\xa\x86\sqljdbc_xa.dll
<Installationsverzeichnis>\sqljdbc_<Version>\<Sprache>\xa\x64\sqljdbc_xa.dll

Ausführliche Informationen über die einzelnen Komponenten finden Sie in der Onlinedokumentation
zum Microsoft JDBC-Treiber für SQL Server unter https://aka.ms/mssql-jdbc.


-------------
DOKUMENTATION
-------------
Diese Informationen zu dieser Version, die Installationsanweisungen und die Lizenzbedingungen sind in diesem Paket enthalten. 
Sämtliche andere Dokumentation finden Sie online.

Beachten Sie, dass keine Offlinehilfedateien mehr bereitgestellt werden. 


---------
JAR-DATEIEN
---------
Aus Gründen der Abwärtskompatibilität und zur Unterstützung möglicher Upgradeszenarios enthält der JDBC-Treiber 8.4 
drei JAR-Klassenbibliotheken in jedem Installationspaket:
	mssql-jdbc-8.4.1.jre8.jar
	mssql-jdbc-8.4.1.jre11.jar
	mssql-jdbc-8.4.1.jre14.jar


----------------------
FEATURESPEZIFISCHE DATEIEN
----------------------
Azure Active Directory- und integrierte Authentifizierungskomponenten (unter Windows) sind im Verzeichnis „auth“ 
enthalten.

JDBC-Komponenten für verteilte Transaktionen sind im Verzeichnis "xa" enthalten.


--------------------
FEATUREABHÄNGIGKEITEN
--------------------
Einige Features im Microsoft JDBC-Treiber 8.4 für SQL Server sind von den folgenden externen Bibliotheken 
abhängig:

1. Verwenden von „Always Encrypted“ mit einem Azure Key Vault-Anbieter
   Abhängige Bibliotheken: azure-keyvault (Version 1.2.4), adal4j (Version 1.6.5)
   und client-runtime (Version 1.7.4)

2. Verwenden von "Always Encrypted" mit Secure Enclaves
   Abhängige Bibliotheken: com.google.code.gson (Version 2.8.6)
   und org.bouncycastle (Version 1.65). org.bouncycastle ist nur für JDK 8 erforderlich.
 
3. Verwenden der integrierten Azure Active Directory-Authentifizierung auf Windows-, Linux-, und macOS-Betriebssystemen
   Abhängige Bibliotheken: adal4j (Version 1.6.5) und client-runtime (Version 1.7.4)
   
4. Verwenden von „useFmtOnly“ zum Abrufen von Parametermetadaten
   Abhängige Bibliotheken: antlr-runtime (Version 4.7.2)
   
Ausführliche Informationen zum Verwenden dieser abhängigen Bibliotheken in einer Java- oder 
Maven-Standardanwendung finden Sie hier: https://go.microsoft.com/fwlink/?linkid=867575

-------
SAMPLES
-------
Beispielanwendungen, die verschiedene Funktionen des JDBC-Treibers veranschaulichen, sind im Verzeichnis
"samples" enthalten. Einzelheiten zu den einzelnen Beispielen und ihrer Ausführung finden Sie in der 
Onlinedokumentation.


-----------
LISTE DER ÄNDERUNGEN
-----------
Änderungen in Version 8.4.1.0 gegenüber Version 8.4.0.0:
– Die Inkompatibilität von „SQLServerConnectionPoolProxy“ mit „delayLoadingLobs“ wurde behoben.
– Ein potenzielles NullPointerException-Problem bei „delayLoadingLobs“ wurde behoben.
– Es wurde ein Problem beim Entschlüsseln von Spaltenverschlüsselungsschlüsseln mithilfe des Windows-Zertifikatspeichers behoben.

Änderungen in Version 8.4.0.0 gegenüber Version 8.2.2.0:
– Es wurde Unterstützung für die Vertraulichkeitsrangfolge bei Verwendung der SQL-Datenermittlung und -klassifizierung hinzugefügt.
– Die API "SQLServerDatabaseMetaData.getDatabaseCompatibilityLevel()" zur Rückgabe des Datenbank-Kompatibilitätsgrads wurde hinzugefügt.
– Es wurde Unterstützung für Azure SQL-DNS-Caching hinzugefügt.
– Eine Option für verzögerte Dauerhaftigkeit wurde "SQLServerConnection.commit()" hinzugefügt.
– Die Überprüfung des Zertifikatablaufs bei Verwendung von Always Encrypted mit dem Feature "Secure Enclaves" wurde hinzugefügt.
– Der Ausnahme beim Schließen der Verbindung wurde der SQL-Zustand hinzugefügt.
– Es wurden Verbindungseigenschaften zum Angeben einer benutzerdefinierten SocketFactory hinzugefügt.
– Es wurde Unterstützung für die Authentifizierung mit Clientzertifikat hinzugefügt.
– Es wurde Unterstützung für JAVA 14 hinzugefügt.
– Es wurde Unterstützung für die Authentifizierung bei Azure Key Vault mithilfe einer verwalteten Identität hinzugefügt.
– Der Treiber wurde so aktualisiert, dass bei Aushandlung einer niedrigeren TLS-Version als 1.2 eine Warnung ausgegeben wird.
– "SQLServerBulkCSVFileRecord.setEscapeColumnDelimitersCSV()" wurde eingeführt, um Trennzeichen und doppelte Anführungszeichen mit Escapezeichen zu versehen, wenn beim Laden von Daten aus CSV-Dateien Massenkopiervorgänge verwendet werden.
– Es wurde erweiterte Unterstützung für Massenkopiervorgänge für Azure Data Warehouse eingeführt.
– Die Verbindungseigenschaft "delayLoadingLobs" wurde eingeführt, um beim Streamen von LOBs Abwärtskompatibilität bereitzustellen.

 Fehlerbehebungen: 
– Es wurde ein Problem behoben, bei dem "DatabaseMetaData.getColumns()" Beschreibungen von Tabellenspalten zeitweise in falscher Reihenfolge zurückgab.
– Es wurde ein Problem mit einem Umwandlungsfehler von räumlichen Datentypen behoben, der bei Aktivierung von Always Encrypted auftrat.
– Es wurde ein Problem behoben, bei dem "DatabaseMetaData.getColumns()" für IS_AUTOINCREMENT und IS_GENERATEDCOLUMN nicht den richtigen Typ für Azure Data Warehouse zurückgab.
– Es wurde ein Problem behoben, bei dem "Geography.STAsBinary()" und "Geometry.STAsBinary()" das WKB-Format anstelle des CLR-Formats zurückgaben.
– Es wurde ein Problem behoben, bei dem das Massenkopieren von "DateTimeOffset" durch Nicht-MSSQL-Resultsets gestattet wurde.
– Durch SonarQube festgestellte Probleme wurden behoben.
– Es wurde ein Problem behoben, bei dem Masseneinfügevorgänge bei Aktivierung von Always Encrypted nicht durchgeführt werden konnten.
– Es wurde ein Problem behoben, bei dem die MSI-Authentifizierung aufgrund eines Konflikts beim Ablaufdatumsformat einen Fehler verursacht hat.
– Es wurde ein Problem behoben, bei dem Streams bei Verwendung von Always Encrypted mit dem Feature "Secure Enclaves" nicht geschlossen wurden.
– Es wurde ein Problem beim Abrufen von SQL VARIANT als zugrunde liegendem Typ behoben.
– Es wurden Probleme mit der Nichtkonformität des Treibers mit JAVA 8 behoben.
– Es wurde ein Problem mit "PreparedStatement" beim Einfügen großer räumlicher Datentypen behoben.
– Es wurde ein Problem mit Escapezeichen für geschweifte Klammern in der Verbindungszeichenfolge behoben.
– Es wurde eine Warnung beim Abrufen von Betriebssysteminformationen aus SQL Server Linux bei der Verwendung verteilter Transaktionen korrigiert.

Verbesserungen:
– "SQLServerPreparedStatement.setObject()" wurde so aktualisiert, dass der TVP-Name aus "SQLServerDataTable" abgerufen wird.
– Die Ausnahmemeldung beim Herstellen einer Verbindung mit einem für die Umleitung aktivierten Azure-Server wurde verbessert.
– Die Leistung beim Analysieren der Verbindungszeichenfolge wurde verbessert.
– Der Datenbankname wurde dem Enclave-Cacheschlüssel für Always Encrypted hinzugefügt.
– Nicht verwendeter Code wurde entfernt.

------------
BEKANNTE PROBLEME
------------
Die folgenden Probleme sind für den Microsoft JDBC-Treiber 8.4 für SQL Server bekannt:

1) TRENNEN VON VERBINDUNGEN MIT SQL AZURE

Bei der Verbindungsherstellung mit SQL Azure können Verbindungen im Leerlauf nach einer Phase ohne Aktivität durch eine Netzwerkkomponente 
wie eine Firewall beendet werden. Um zu vermeiden, das Verbindungen im Leerlauf von einer Netzwerkkomponente beendet werden, 
sollten die folgenden Registrierungseinstellungen (oder bei anderen Betriebssystemen als Windows die jeweiligen Entsprechungen) auf dem 
Betriebssystem festgelegt werden, auf dem der Treiber geladen wird:
           
Registrierungseinstellung                                                                   Empfohlener Wert
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\KeepAliveTime            30000
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\KeepAliveInterval         1000
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\TcpMaxDataRetransmission  10

2) BEI VERWENDUNG VON TVP MIT SQL_VARIANT 

2.a) FÜR DATUMSWERTE

Wenn Sie TVP zum Auffüllen einer Tabelle verwenden, die in der sql_variant-Spalte gespeicherte datetime/smalldatetime/date-Werte enthält, 
können Sie getDateTime()/getSmallDateTime()/getDate() im Resultset nicht aufrufen, und es wird die folgende Ausnahme ausgelöst:

	java.lang.String kann nicht in java.sql.Timestamp umgewandelt werden

Problemumgehung: Verwenden Sie stattdessen „getString()“ oder „getObject()“.

2.b) VERWENDUNG VON TVP MIT SQL_VARIANT FÜR NULL-WERTE

Wenn Sie TVP zum Auffüllen einer Tabelle verwenden und den Wert NULL an den Spaltentyp „sql_variant“ senden, wird
eine Ausnahme ausgelöst, da die Eingabe eines NULL-Werts mit dem Spaltentyp sql_variant in TVP derzeit nicht unterstützt wird.


3) BEI VERWENDUNG DER NTLM-AUTHENTIFIZIERUNG

Die zeitgleiche Aktivierung des erweiterten Schutzes und von verschlüsselten Verbindungen wird derzeit nicht unterstützt.

4) BEI VERWENDUNG VON useFmtOnly

Es gibt einige Probleme mit diesem Feature. Diese sind auf Mängel in der SQL-Parserlogik zurückzuführen.
Weitere Informationen und Vorschläge zur Problemumgehung finden Sie unter https://aka.ms/mssql-jdbc-usefmtonly.